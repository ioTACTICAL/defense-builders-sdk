# ATAK-CIV SDK Configuration
# Android Tactical Assault Kit (Civil) SDK Type Definition
# https://github.com/iotactical/defense-builders-sdk

# SDK Type Definition
SDK_TYPE="atak-civ"
SDK_NAME="ATAK-CIV"
SDK_DESCRIPTION="Android Tactical Assault Kit (Civil) Development Environment"
SDK_CATEGORY="mobile-development"
SDK_VENDOR="Department of Defense"
SDK_LICENSE="Apache-2.0"

# Container Configuration
SDK_BASE_IMAGE="ghcr.io/iotactical/dbsdk-base:latest"
SDK_CONTAINER_PREFIX="dbsdk-atak-civ"
SDK_PLATFORMS="linux/amd64,linux/arm64"

# Version Discovery Configuration
SDK_VERSION_DISCOVERY="discover_atak_civ_versions"
SDK_VERSION_PATTERN="^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"
SDK_VERSION_SOURCE="filesystem"  # filesystem, api, registry
SDK_VERSION_PATHS="$HOME/Downloads:/opt/sdks"

# Build Configuration
SDK_BUILD_FUNCTION="build_atak_civ_container"
SDK_BUILD_DOCKERFILE_TEMPLATE="atak-civ-dockerfile.template"
SDK_BUILD_CONTEXT_PREPARATION="prepare_atak_civ_build_context"

# Repository Configuration  
SDK_REPO_FUNCTION="create_atak_civ_repository"
SDK_REPO_NAME_PATTERN="ATAK-CIV-{VERSION}-SDK"
SDK_REPO_BRANCH_PATTERN="atak-civ-{VERSION}"
SDK_REPO_DESCRIPTION_TEMPLATE="ATAK-CIV SDK v{VERSION} - Android Tactical Assault Kit (Civil) Development Environment"

# Development Environment
SDK_REQUIRED_TOOLS="java gradle android-sdk"
SDK_JAVA_VERSION="17"
SDK_ANDROID_API_LEVELS="30,33"
SDK_GRADLE_VERSION="8.5"

# Security Configuration
SDK_VULNERABILITY_SCANNING=true
SDK_SBOM_GENERATION=true
SDK_SECURITY_HARDENING=true

# Documentation
SDK_DOCS_URL="https://github.com/deptofdefense/AndroidTacticalAssaultKit-CIV"
SDK_TUTORIALS_URL="https://iotactical.co/tutorials/atak-plugins"
SDK_EXAMPLES_REPO="https://github.com/iotactical/atak-civ-examples"

# ATAK-CIV Specific Functions
# These functions implement the SDK-specific logic referenced above

# Discover ATAK-CIV SDK versions from filesystem
discover_atak_civ_versions() {
    local search_paths
    IFS=':' read -ra search_paths <<< "${SDK_VERSION_PATHS:-$HOME/Downloads}"
    local versions=()
    
    framework_log_debug "Searching for ATAK-CIV SDKs in: ${search_paths[*]}"
    
    for search_path in "${search_paths[@]}"; do
        if [[ -d "$search_path" ]]; then
            while IFS= read -r -d '' sdk_file; do
                local filename=$(basename "$sdk_file")
                local version
                version=$(echo "$filename" | sed -E 's/ATAK-CIV-([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)-SDK\.zip/\1/')
                
                if [[ "$version" != "$filename" && "$version" =~ $SDK_VERSION_PATTERN ]]; then
                    versions+=("$version")
                fi
            done < <(find "$search_path" -name "ATAK-CIV-*.zip" -print0 2>/dev/null)
        fi
    done
    
    if [[ ${#versions[@]} -eq 0 ]]; then
        framework_log_warn "No ATAK-CIV SDK versions found in search paths"
        return 1
    fi
    
    # Sort versions and remove duplicates
    printf '%s\n' "${versions[@]}" | sort -V -u
}

# Prepare ATAK-CIV SDK build context
prepare_atak_civ_build_context() {
    local version="$1"
    local build_context="$2"
    local search_paths
    IFS=':' read -ra search_paths <<< "${SDK_VERSION_PATHS:-$HOME/Downloads}"
    
    framework_log_info "Preparing ATAK-CIV v$version build context"
    
    # Find SDK zip file
    local sdk_file=""
    for search_path in "${search_paths[@]}"; do
        local candidate="$search_path/ATAK-CIV-${version}-SDK.zip"
        if [[ -f "$candidate" ]]; then
            sdk_file="$candidate"
            break
        fi
    done
    
    if [[ -z "$sdk_file" ]]; then
        framework_log_error "ATAK-CIV SDK v$version not found in search paths"
        return 1
    fi
    
    # Create version-specific directory in build context
    local version_dir="$build_context/sdks/atak-civ/v$version"
    mkdir -p "$version_dir"
    
    # Copy SDK to build context
    cp "$sdk_file" "$version_dir/"
    
    framework_log_success "ATAK-CIV v$version SDK prepared in build context"
    return 0
}

# Build ATAK-CIV container
build_atak_civ_container() {
    local version="$1"
    shift
    local extra_args=("$@")
    
    framework_log_info "Building ATAK-CIV v$version container"
    
    # Generate version-specific Dockerfile
    local dockerfile="$DBSDK_TEMP_DIR/Dockerfile.atak-civ-$version"
    local image_tag="$DBSDK_BUILD_REGISTRY/$DBSDK_DEFAULT_ORG/$SDK_CONTAINER_PREFIX:$version"
    
    generate_atak_civ_dockerfile "$version" "$dockerfile"
    
    # Prepare build context
    local build_context="$DBSDK_TEMP_DIR/build-context-$version"
    mkdir -p "$build_context"
    
    if ! prepare_atak_civ_build_context "$version" "$build_context"; then
        return 1
    fi
    
    # Build container
    framework_log_info "Building image: $image_tag"
    
    docker buildx build \
        --platform "$DBSDK_BUILD_PLATFORMS" \
        --file "$dockerfile" \
        --tag "$image_tag" \
        --build-arg BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --build-arg GIT_SHA="${GIT_SHA:-unknown}" \
        --build-arg SDK_VERSION="$version" \
        "${extra_args[@]}" \
        "$build_context"
    
    local build_result=$?
    
    # Clean up
    rm -f "$dockerfile"
    rm -rf "$build_context"
    
    if [[ $build_result -eq 0 ]]; then
        framework_log_success "Successfully built: $image_tag"
    else
        framework_log_error "Failed to build: $image_tag"
    fi
    
    return $build_result
}

# Generate ATAK-CIV Dockerfile
generate_atak_civ_dockerfile() {
    local version="$1"
    local dockerfile_path="$2"
    
    framework_log_debug "Generating Dockerfile for ATAK-CIV v$version"
    
    cat > "$dockerfile_path" << EOF
# Defense Builders SDK - ATAK-CIV v${version}
# Android Tactical Assault Kit (Civil) Development Environment
# Generated by DBSDK Framework

FROM ${SDK_BASE_IMAGE}

LABEL org.opencontainers.image.source="https://github.com/iotactical/defense-builders-sdk"
LABEL org.opencontainers.image.description="DBSDK ATAK-CIV v${version} Development Environment"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.version="${version}"
LABEL dbsdk.sdk.type="atak-civ"
LABEL dbsdk.sdk.version="${version}"

# ATAK-CIV specific environment
ENV DBSDK_SDK_TYPE=atak-civ
ENV DBSDK_SDK_VERSION=${version}
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=\$PATH:\$ANDROID_HOME/cmdline-tools/latest/bin:\$ANDROID_HOME/platform-tools
ENV JAVA_HOME=/usr/lib/jvm/java-${SDK_JAVA_VERSION}-openjdk-amd64

USER root

# Install Java ${SDK_JAVA_VERSION} and Android development tools
RUN apt-get update && apt-get install -y \\
    openjdk-${SDK_JAVA_VERSION}-jdk \\
    lib32stdc++6 \\
    lib32z1 \\
    libc6-i386 \\
    maven \\
    unzip \\
    wget \\
    zip \\
    && apt-get clean \\
    && rm -rf /var/lib/apt/lists/*

# Install Gradle ${SDK_GRADLE_VERSION}
RUN wget -q https://services.gradle.org/distributions/gradle-${SDK_GRADLE_VERSION}-bin.zip -O gradle.zip \\
    && unzip -q gradle.zip -d /opt \\
    && rm gradle.zip \\
    && ln -s /opt/gradle-${SDK_GRADLE_VERSION}/bin/gradle /usr/local/bin/gradle

# Install Android SDK and tools
RUN mkdir -p \$ANDROID_HOME/cmdline-tools && \\
    cd \$ANDROID_HOME/cmdline-tools && \\
    curl -o android-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip && \\
    unzip android-tools.zip && \\
    mv cmdline-tools latest && \\
    rm android-tools.zip

# Accept Android licenses and install components
RUN yes | \$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses && \\
    \$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \\
        "platform-tools" \\
        $(printf '"platforms;android-%s" ' ${SDK_ANDROID_API_LEVELS//,/ }) \\
        "build-tools;30.0.3" \\
        "build-tools;33.0.1"

# Create ATAK-CIV version-specific directory
RUN mkdir -p /opt/atak-civ/${version}

# Copy and extract ATAK-CIV SDK
COPY sdks/atak-civ/v${version}/ATAK-CIV-${version}-SDK.zip /tmp/atak-sdk.zip
RUN cd /tmp && \\
    unzip -q atak-sdk.zip && \\
    mv ATAK-CIV-${version}-SDK/* /opt/atak-civ/${version}/ && \\
    rm -rf /tmp/atak-sdk.zip /tmp/ATAK-CIV-${version}-SDK && \\
    chown -R vscode:vscode /opt/atak-civ

# Set up ATAK development environment
ENV ATAK_SDK_PATH=/opt/atak-civ/${version}
ENV ATAK_SDK_VERSION=${version}

# Create version-aware utility scripts
RUN echo '#!/bin/bash' > /usr/local/bin/atak-sdk-info && \\
    echo 'echo "ATAK-CIV SDK v${version}"' >> /usr/local/bin/atak-sdk-info && \\
    echo 'echo "Path: \$ATAK_SDK_PATH"' >> /usr/local/bin/atak-sdk-info && \\
    chmod +x /usr/local/bin/atak-sdk-info

USER vscode
WORKDIR /workspaces

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \\
    CMD atak-sdk-info && dbsdk version

# Welcome message
RUN echo 'echo "ðŸš€ ATAK-CIV v${version} Development Environment"' >> ~/.bashrc && \\
    echo 'echo "SDK Path: \$ATAK_SDK_PATH"' >> ~/.bashrc && \\
    echo 'echo "Ready for plugin development!"' >> ~/.bashrc

CMD ["/bin/bash"]
EOF

    framework_log_debug "Dockerfile generated: $dockerfile_path"
}

# Create ATAK-CIV repository structure
create_atak_civ_repository() {
    local version="$1"
    local repo_name="$2"
    local branch_name="$3"
    
    framework_log_info "Creating ATAK-CIV v$version repository structure"
    
    # Use enhanced repository creation
    local temp_repo="$DBSDK_TEMP_DIR/$repo_name"
    mkdir -p "$temp_repo/.devcontainer"
    
    # Enhanced devcontainer.json for ATAK-CIV
    cat > "$temp_repo/.devcontainer/devcontainer.json" << EOF
{
    "name": "ATAK-CIV SDK v${version}",
    "image": "${DBSDK_REPO_REGISTRY}/${DBSDK_REPO_ORG}/${SDK_CONTAINER_PREFIX}:${version}",
    "features": {
        "ghcr.io/devcontainers/features/common-utils:2": {
            "installZsh": true,
            "configureZshAsDefaultShell": true,
            "installOhMyZsh": true
        },
        "ghcr.io/devcontainers/features/docker-in-docker:2": {},
        "ghcr.io/devcontainers/features/github-cli:1": {}
    },
    "customizations": {
        "vscode": {
            "extensions": [
                "vscjava.vscode-java-pack",
                "redhat.java",
                "vscjava.vscode-gradle",
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "ms-azuretools.vscode-docker",
                "GitHub.copilot"
            ],
            "settings": {
                "java.configuration.updateBuildConfiguration": "interactive",
                "java.compile.nullAnalysis.mode": "automatic",
                "java.import.gradle.enabled": true
            }
        }
    },
    "forwardPorts": [8080, 3000, 8443],
    "postCreateCommand": "dbsdk version && atak-sdk-info",
    "remoteUser": "vscode",
    "containerEnv": {
        "ATAK_SDK_VERSION": "${version}",
        "ATAK_SDK_PATH": "/opt/atak-civ/${version}"
    }
}
EOF

    # Enhanced README for ATAK-CIV
    cat > "$temp_repo/README.md" << EOF
# ATAK-CIV SDK v${version}

**Android Tactical Assault Kit (Civil) Development Environment**

[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/${DBSDK_REPO_ORG}/${repo_name}?quickstart=1&ref=${branch_name})

## Quick Start

This is a complete ATAK-CIV development environment with SDK v${version} pre-configured.

### Development Tools Included

- **Java ${SDK_JAVA_VERSION}**: LTS Java development kit
- **Gradle ${SDK_GRADLE_VERSION}**: Build automation and dependency management  
- **Android SDK**: Platform tools and build tools for API levels ${SDK_ANDROID_API_LEVELS}
- **ATAK-CIV SDK v${version}**: Complete development kit with all libraries

### Getting Started

1. Open in GitHub Codespaces (recommended) or VS Code Dev Containers
2. Wait for environment setup to complete
3. Start developing your ATAK plugin in \`/workspaces\`

### SDK Information

- **Version**: ${version}
- **Location**: \`/opt/atak-civ/${version}\`
- **Documentation**: [${SDK_DOCS_URL}](${SDK_DOCS_URL})
- **Tutorials**: [${SDK_TUTORIALS_URL}](${SDK_TUTORIALS_URL})

### Quick Commands

\`\`\`bash
# Check SDK information
atak-sdk-info

# Verify environment
dbsdk version
dbsdk compliance-check

# Create new plugin project
mkdir my-atak-plugin
cd my-atak-plugin
# Your development starts here!
\`\`\`

---

Built with [Defense Builders SDK](https://github.com/iotactical/defense-builders-sdk) framework.
EOF

    framework_log_success "ATAK-CIV repository structure created: $temp_repo"
}

# Export ATAK-CIV specific functions
export -f discover_atak_civ_versions prepare_atak_civ_build_context build_atak_civ_container
export -f generate_atak_civ_dockerfile create_atak_civ_repository