name: Build SDK Images

on:
  push:
    branches: [main]
    paths: ['sdks/**']
  pull_request:
    paths: ['sdks/**']
  workflow_dispatch:
  workflow_run:
    workflows: ["Build DBSDK Base Image"]
    types: [completed]

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      sdks: ${{ steps.changes.outputs.sdks }}
      base-updated: ${{ steps.base.outputs.updated }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect SDK changes
      id: changes
      run: |
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          # Base image updated, rebuild all SDKs
          echo "sdks=[\"atak-civ\"]" >> $GITHUB_OUTPUT
        else
          # Check which SDKs have changes
          changed_sdks=()
          for sdk_dir in sdks/*/; do
            sdk_name=$(basename "$sdk_dir")
            if git diff --quiet HEAD~1 HEAD -- "$sdk_dir" 2>/dev/null || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              changed_sdks+=("\"$sdk_name\"")
            fi
          done
          if [ ${#changed_sdks[@]} -eq 0 ]; then
            echo "sdks=[]" >> $GITHUB_OUTPUT
          else
            echo "sdks=[$(IFS=,; echo "${changed_sdks[*]}")]" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Check base image update
      id: base
      run: |
        echo "updated=${{ github.event_name == 'workflow_run' }}" >> $GITHUB_OUTPUT

  build-sdk:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.sdks != '[]'
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix:
        sdk: ${{ fromJson(needs.detect-changes.outputs.sdks) }}
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Wait for base image if needed
      if: needs.detect-changes.outputs.base-updated == 'true'
      run: |
        echo "Waiting for base image to be available..."
        timeout 300 bash -c '
          while ! docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-base:latest; do
            echo "Base image not ready yet, waiting..."
            sleep 10
          done
        '

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-${{ matrix.sdk }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push SDK image
      uses: docker/build-push-action@v5
      with:
        context: ./sdks/${{ matrix.sdk }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_SHA=${{ github.sha }}
        cache-from: type=gha,scope=${{ matrix.sdk }}
        cache-to: type=gha,mode=max,scope=${{ matrix.sdk }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-${{ matrix.sdk }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.sdk }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.sdk }}.sarif'

    - name: Test SDK image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-${{ matrix.sdk }}:latest /opt/dbsdk/atak-civ/scripts/healthcheck-atak.sh

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-${{ matrix.sdk }}:latest
        format: spdx-json
        output-file: sbom-${{ matrix.sdk }}.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.sdk }}-${{ github.sha }}
        path: sbom-${{ matrix.sdk }}.spdx.json

    - name: Success notification
      run: |
        echo "SDK Image Built: ${{ env.REGISTRY }}/${{ github.repository_owner }}/dbsdk-${{ matrix.sdk }}:latest" >> $GITHUB_STEP_SUMMARY