#!/bin/bash
# DBSDK Compliance Assessment
# Assess STIG and NIST 800-53r5 compliance posture

set -e

# Source utility functions
DBSDK_BASE_DIR="/opt/dbsdk"
source "${DBSDK_BASE_DIR}/scripts/dbsdk-lib.sh"

# Show help
show_help() {
    echo -e "${BOLD}${BLUE}DBSDK Compliance Assessment${NC}"
    echo -e "${BOLD}${BLUE}══════════════════════════${NC}"
    echo ""
    echo -e "${BOLD}USAGE:${NC}"
    echo "  dbsdk compliance [OPTIONS]"
    echo ""
    echo -e "${BOLD}OPTIONS:${NC}"
    echo "  --assess        Run basic compliance assessment (default)"
    echo "  --stig          Focus on STIG compliance checks"
    echo "  --nist          Focus on NIST 800-53r5 controls"
    echo "  --report        Generate detailed compliance report"
    echo "  --summary       Show compliance summary only"
    echo "  --help          Show this help message"
    echo ""
    echo -e "${BOLD}${PURPLE}PREMIUM OPTIONS:${NC}"
    echo "  --full          Complete compliance assessment ${YELLOW}[Premium]${NC}"
    echo "  --remediate     Auto-remediation suggestions ${YELLOW}[Premium]${NC}"
    echo "  --export        Export compliance artifacts ${YELLOW}[Premium]${NC}"
    echo ""
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo "  dbsdk compliance                # Basic assessment"
    echo "  dbsdk compliance --stig         # STIG-focused checks"
    echo "  dbsdk compliance --report       # Detailed report"
    echo ""
}

# Basic system hardening checks
check_system_hardening() {
    local score=0
    local total_checks=0
    
    echo -e "${BOLD}System Hardening Assessment${NC}"
    echo "────────────────────────────────"
    
    # Check 1: Non-root user
    ((total_checks++))
    if [[ $(id -u) -ne 0 ]]; then
        echo -e "${GREEN}✓${NC} Running as non-root user ($(whoami))"
        ((score++))
    else
        echo -e "${RED}✗${NC} Running as root user (security risk)"
    fi
    
    # Check 2: sudoers configuration
    ((total_checks++))
    if sudo -l >/dev/null 2>&1; then
        if sudo -l | grep -q "NOPASSWD"; then
            echo -e "${YELLOW}⚠${NC} Passwordless sudo configured (development convenience)"
        else
            echo -e "${GREEN}✓${NC} Sudo requires password"
            ((score++))
        fi
    else
        echo -e "${YELLOW}⚠${NC} Sudo not available"
    fi
    
    # Check 3: File permissions
    ((total_checks++))
    local sensitive_dirs=("/etc/passwd" "/etc/shadow" "/etc/sudoers")
    local perm_issues=0
    
    for dir in "${sensitive_dirs[@]}"; do
        if [[ -f "$dir" ]]; then
            local perms
            perms=$(stat -c "%a" "$dir" 2>/dev/null || echo "unknown")
            if [[ "$dir" == "/etc/shadow" && "$perms" != "640" ]]; then
                ((perm_issues++))
            fi
        fi
    done
    
    if (( perm_issues == 0 )); then
        echo -e "${GREEN}✓${NC} Critical file permissions appear secure"
        ((score++))
    else
        echo -e "${YELLOW}⚠${NC} Some file permissions may need review"
    fi
    
    # Check 4: Package updates
    ((total_checks++))
    if command_exists apt; then
        local updates
        updates=$(apt list --upgradable 2>/dev/null | wc -l)
        if (( updates <= 1 )); then
            echo -e "${GREEN}✓${NC} System appears up to date"
            ((score++))
        else
            echo -e "${YELLOW}⚠${NC} $((updates-1)) package updates available"
        fi
    else
        echo -e "${YELLOW}⚠${NC} Cannot check package updates (non-apt system)"
    fi
    
    # Check 5: SSH configuration (if SSH is installed)
    ((total_checks++))
    if [[ -f /etc/ssh/sshd_config ]]; then
        if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config 2>/dev/null; then
            echo -e "${GREEN}✓${NC} SSH root login disabled"
            ((score++))
        else
            echo -e "${YELLOW}⚠${NC} SSH root login may be enabled"
        fi
    else
        echo -e "${GREEN}✓${NC} SSH daemon not configured (container environment)"
        ((score++))
    fi
    
    echo ""
    echo -e "${BOLD}System Hardening Score: ${score}/${total_checks}${NC}"
    
    if (( score >= total_checks * 80 / 100 )); then
        echo -e "${GREEN}Good security posture${NC}"
    elif (( score >= total_checks * 60 / 100 )); then
        echo -e "${YELLOW}Moderate security posture${NC}"
    else
        echo -e "${RED}Security improvements needed${NC}"
    fi
    
    echo ""
}

# Container security checks
check_container_security() {
    local score=0
    local total_checks=0
    
    echo -e "${BOLD}Container Security Assessment${NC}"
    echo "─────────────────────────────────"
    
    # Check 1: Container user
    ((total_checks++))
    local user_info
    user_info=$(id)
    if [[ "$user_info" =~ uid=0 ]]; then
        echo -e "${RED}✗${NC} Container running as root"
    else
        echo -e "${GREEN}✓${NC} Container running as non-root user"
        ((score++))
    fi
    
    # Check 2: Capabilities
    ((total_checks++))
    if command_exists capsh; then
        local caps
        caps=$(capsh --print 2>/dev/null || echo "unknown")
        if [[ "$caps" =~ cap_sys_admin ]] || [[ "$caps" =~ "=ep" ]]; then
            echo -e "${YELLOW}⚠${NC} Container has elevated capabilities"
        else
            echo -e "${GREEN}✓${NC} Container capabilities appear restricted"
            ((score++))
        fi
    else
        echo -e "${YELLOW}⚠${NC} Cannot assess container capabilities"
    fi
    
    # Check 3: Read-only filesystem
    ((total_checks++))
    if mount | grep -q "/ .*ro,"; then
        echo -e "${GREEN}✓${NC} Root filesystem is read-only"
        ((score++))
    else
        echo -e "${YELLOW}⚠${NC} Root filesystem is writable (typical for dev containers)"
    fi
    
    # Check 4: Temporary filesystem
    ((total_checks++))
    if mount | grep -q "/tmp.*tmpfs"; then
        echo -e "${GREEN}✓${NC} Temporary filesystem properly mounted"
        ((score++))
    else
        echo -e "${YELLOW}⚠${NC} Temporary filesystem not using tmpfs"
    fi
    
    # Check 5: No setuid binaries in user space
    ((total_checks++))
    local setuid_count
    setuid_count=$(find /usr /bin /sbin -perm -4000 2>/dev/null | wc -l || echo "0")
    if (( setuid_count <= 10 )); then
        echo -e "${GREEN}✓${NC} Minimal setuid binaries found ($setuid_count)"
        ((score++))
    else
        echo -e "${YELLOW}⚠${NC} Multiple setuid binaries present ($setuid_count)"
    fi
    
    echo ""
    echo -e "${BOLD}Container Security Score: ${score}/${total_checks}${NC}"
    
    if (( score >= total_checks * 80 / 100 )); then
        echo -e "${GREEN}Good container security${NC}"
    elif (( score >= total_checks * 60 / 100 )); then
        echo -e "${YELLOW}Moderate container security${NC}"
    else
        echo -e "${RED}Container security improvements needed${NC}"
    fi
    
    echo ""
}

# STIG compliance checks (basic)
check_stig_compliance() {
    echo -e "${BOLD}STIG Compliance Assessment (Basic)${NC}"
    echo "───────────────────────────────────────"
    echo ""
    
    local findings=0
    
    echo -e "${BOLD}Ubuntu 22.04 STIG Checks:${NC}"
    
    # STIG V-238199: System must limit concurrent sessions
    if [[ -f /etc/security/limits.conf ]]; then
        if grep -q "maxlogins" /etc/security/limits.conf; then
            echo -e "${GREEN}✓${NC} V-238199: Session limits configured"
        else
            echo -e "${YELLOW}⚠${NC} V-238199: Session limits not explicitly configured"
            ((findings++))
        fi
    else
        echo -e "${YELLOW}⚠${NC} V-238199: limits.conf not found"
        ((findings++))
    fi
    
    # STIG V-238200: Account lockout policy
    if [[ -f /etc/pam.d/common-auth ]]; then
        if grep -q "pam_faillock" /etc/pam.d/common-auth; then
            echo -e "${GREEN}✓${NC} V-238200: Account lockout configured"
        else
            echo -e "${YELLOW}⚠${NC} V-238200: Account lockout not configured"
            ((findings++))
        fi
    else
        echo -e "${YELLOW}⚠${NC} V-238200: PAM configuration not standard"
        ((findings++))
    fi
    
    # STIG V-238201: Password complexity
    if [[ -f /etc/pam.d/common-password ]]; then
        if grep -q "pam_pwquality" /etc/pam.d/common-password; then
            echo -e "${GREEN}✓${NC} V-238201: Password complexity configured"
        else
            echo -e "${YELLOW}⚠${NC} V-238201: Password complexity not configured"
            ((findings++))
        fi
    else
        echo -e "${YELLOW}⚠${NC} V-238201: PAM password configuration not found"
        ((findings++))
    fi
    
    # STIG V-238210: Audit system
    if command_exists auditd || systemctl is-active auditd >/dev/null 2>&1; then
        echo -e "${GREEN}✓${NC} V-238210: Audit system present"
    else
        echo -e "${YELLOW}⚠${NC} V-238210: Audit system not running (container limitation)"
        ((findings++))
    fi
    
    echo ""
    echo -e "${BOLD}STIG Assessment Summary:${NC}"
    echo -e "Findings requiring attention: ${findings}"
    
    if (( findings == 0 )); then
        echo -e "${GREEN}Excellent STIG compliance${NC}"
    elif (( findings <= 2 )); then
        echo -e "${YELLOW}Good STIG compliance with minor findings${NC}"
    else
        echo -e "${YELLOW}STIG compliance needs improvement${NC}"
    fi
    
    echo ""
    echo -e "${DIM}Note: Container environments may have different requirements than traditional servers${NC}"
    echo -e "${DIM}For complete STIG assessment, consider upgrading to DBSDK Premium${NC}"
    echo ""
}

# NIST 800-53r5 controls check (basic)
check_nist_compliance() {
    echo -e "${BOLD}NIST 800-53r5 Controls Assessment (Basic)${NC}"
    echo "─────────────────────────────────────────────"
    echo ""
    
    local implemented=0
    local total_controls=0
    
    echo -e "${BOLD}Access Control (AC):${NC}"
    ((total_controls++))
    if [[ $(id -u) -ne 0 ]]; then
        echo -e "${GREEN}✓${NC} AC-6: Least privilege principle (non-root user)"
        ((implemented++))
    else
        echo -e "${RED}✗${NC} AC-6: Running with root privileges"
    fi
    
    echo ""
    echo -e "${BOLD}Audit and Accountability (AU):${NC}"
    ((total_controls++))
    if [[ -f /var/log/auth.log ]] || [[ -f /var/log/secure ]]; then
        echo -e "${GREEN}✓${NC} AU-2: Audit events logging configured"
        ((implemented++))
    else
        echo -e "${YELLOW}⚠${NC} AU-2: Limited audit logging (container environment)"
    fi
    
    echo ""
    echo -e "${BOLD}System and Communications Protection (SC):${NC}"
    ((total_controls++))
    if ss -tuln 2>/dev/null | grep -q ":22\|:80\|:443"; then
        echo -e "${YELLOW}⚠${NC} SC-7: Network services running (development environment)"
    else
        echo -e "${GREEN}✓${NC} SC-7: Minimal network exposure"
        ((implemented++))
    fi
    
    echo ""
    echo -e "${BOLD}System and Information Integrity (SI):${NC}"
    ((total_controls++))
    if [[ -f "${DBSDK_BASE_DIR}/sbom.json" ]]; then
        echo -e "${GREEN}✓${NC} SI-7: Software integrity (SBOM available)"
        ((implemented++))
    else
        echo -e "${YELLOW}⚠${NC} SI-7: SBOM not found"
    fi
    
    ((total_controls++))
    if dpkg -l | grep -q "clamav\|rkhunter"; then
        echo -e "${GREEN}✓${NC} SI-3: Malware protection tools installed"
        ((implemented++))
    else
        echo -e "${YELLOW}⚠${NC} SI-3: No malware protection detected (may not be needed for containers)"
    fi
    
    echo ""
    echo -e "${BOLD}NIST 800-53r5 Assessment Summary:${NC}"
    echo -e "Controls implemented: ${implemented}/${total_controls}"
    
    local percentage=$((implemented * 100 / total_controls))
    if (( percentage >= 80 )); then
        echo -e "${GREEN}Strong NIST compliance (${percentage}%)${NC}"
    elif (( percentage >= 60 )); then
        echo -e "${YELLOW}Moderate NIST compliance (${percentage}%)${NC}"
    else
        echo -e "${YELLOW}NIST compliance needs improvement (${percentage}%)${NC}"
    fi
    
    echo ""
    echo -e "${DIM}Note: This is a basic assessment of key controls${NC}"
    echo -e "${DIM}For comprehensive NIST 800-53r5 assessment, consider DBSDK Premium${NC}"
    echo ""
}

# Generate compliance summary
show_compliance_summary() {
    echo -e "${BOLD}${BLUE}DBSDK Compliance Summary${NC}"
    echo -e "${BOLD}${BLUE}══════════════════════${NC}"
    echo ""
    
    echo -e "${BOLD}Container Information:${NC}"
    echo -e "Environment: ${DBSDK_SDK_TYPE:-Unknown SDK}"
    echo -e "Base Image: DBSDK v${DBSDK_VERSION:-Unknown}"
    echo -e "Assessment Date: $(date)"
    echo ""
    
    echo -e "${BOLD}Quick Compliance Check:${NC}"
    
    # Quick security posture
    if [[ $(id -u) -ne 0 ]]; then
        echo -e "${GREEN}✓${NC} Non-root execution"
    else
        echo -e "${RED}✗${NC} Root execution detected"
    fi
    
    if [[ -f "${DBSDK_BASE_DIR}/sbom.json" ]]; then
        echo -e "${GREEN}✓${NC} SBOM available for supply chain security"
    else
        echo -e "${YELLOW}⚠${NC} SBOM not found"
    fi
    
    if [[ "${DBSDK_TELEMETRY_ENABLED:-true}" == "true" ]]; then
        echo -e "${GREEN}✓${NC} Telemetry enabled (helps improve security)"
    else
        echo -e "${YELLOW}○${NC} Telemetry disabled"
    fi
    
    echo ""
    echo -e "${BOLD}Available Assessments:${NC}"
    echo "  • ${BOLD}--assess${NC}    Full basic compliance assessment"
    echo "  • ${BOLD}--stig${NC}      STIG-specific compliance checks"
    echo "  • ${BOLD}--nist${NC}      NIST 800-53r5 controls assessment"
    echo "  • ${BOLD}--report${NC}    Detailed compliance report"
    echo ""
    
    echo -e "${BOLD}${PURPLE}Premium Features Available:${NC}"
    echo "  • Complete STIG assessment with remediation"
    echo "  • Full NIST 800-53r5 control mapping"
    echo "  • Automated compliance reporting"
    echo "  • RMF and ATO documentation support"
    echo ""
    echo -e "Learn more: ${CYAN}https://iotactical.co/premium${NC}"
}

# Main assessment function
run_assessment() {
    echo -e "${BOLD}${BLUE}DBSDK Compliance Assessment${NC}"
    echo -e "${BOLD}${BLUE}══════════════════════════${NC}"
    echo ""
    echo -e "Assessment Date: $(date)"
    echo -e "Environment: ${DBSDK_SDK_TYPE:-Unknown SDK} v${DBSDK_SDK_VERSION:-Unknown}"
    echo -e "Base: DBSDK v${DBSDK_VERSION:-Unknown}"
    echo ""
    
    check_system_hardening
    check_container_security
    
    echo -e "${BOLD}Assessment Complete${NC}"
    echo -e "For detailed STIG and NIST assessments, use:"
    echo -e "  ${BOLD}dbsdk compliance --stig${NC}"
    echo -e "  ${BOLD}dbsdk compliance --nist${NC}"
    echo ""
}

# Premium feature handlers
handle_premium_feature() {
    local feature_name="$1"
    
    if ! check_premium_feature "$feature_name"; then
        exit 1
    fi
    
    # This would contain the actual premium feature implementation
    log_success "Premium feature '$feature_name' would be implemented here"
    echo "Full compliance assessment, remediation, and artifact export coming soon!"
}

# Main function
main() {
    local action="summary"
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--assess")
                action="assess"
                shift
                ;;
            "--stig")
                action="stig"
                shift
                ;;
            "--nist")
                action="nist"
                shift
                ;;
            "--report")
                action="report"
                shift
                ;;
            "--summary")
                action="summary"
                shift
                ;;
            "--full")
                handle_premium_feature "Full Compliance Assessment"
                exit 0
                ;;
            "--remediate")
                handle_premium_feature "Auto-Remediation"
                exit 0
                ;;
            "--export")
                handle_premium_feature "Compliance Export"
                exit 0
                ;;
            "--help"|"-h")
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    case "$action" in
        "summary")
            show_compliance_summary
            ;;
        "assess")
            run_assessment
            ;;
        "stig")
            check_stig_compliance
            ;;
        "nist")
            check_nist_compliance
            ;;
        "report")
            echo -e "${BOLD}Detailed Compliance Report${NC}"
            echo "=========================="
            echo ""
            run_assessment
            check_stig_compliance
            check_nist_compliance
            ;;
        *)
            log_error "Unknown action: $action"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"